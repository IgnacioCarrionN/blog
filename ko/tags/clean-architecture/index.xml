<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>clean-architecture on Carrion.dev</title><link>https://carrion.dev/ko/tags/clean-architecture/</link><description>Recent content in clean-architecture on Carrion.dev</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>ignacio@carrion.dev (Ignacio Carrión)</managingEditor><webMaster>ignacio@carrion.dev (Ignacio Carrión)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Fri, 13 Jun 2025 08:00:00 +0100</lastBuildDate><atom:link href="https://carrion.dev/ko/tags/clean-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Patrones DataSource y Repository: Construyendo una Capa de Datos Robusta</title><link>https://carrion.dev/ko/es/posts/datasources-repository-patterns/</link><pubDate>Fri, 13 Jun 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 13 Jun 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/ko/es/posts/datasources-repository-patterns/</guid><description>Patrones DataSource y Repository: Construyendo una Capa de Datos Robusta En el desarrollo de aplicaciones modernas, gestionar el acceso a datos de manera eficiente es crucial para crear software mantenible y escalable. Dos patrones arquitectónicos que mejoran significativamente la gestión de datos son los patrones DataSource y Repository. Este artículo explora qué son estos patrones, cómo funcionan juntos y cómo implementarlos de manera efectiva con ejemplos prácticos.
¿Qué Son los DataSources?</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/repository.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>architecture</category><category>clean-architecture</category><category>repository-pattern</category><category>datasources</category><category>software-design</category></item><item><title>Casos de Uso: Mejorando la Arquitectura de tu Proyecto</title><link>https://carrion.dev/ko/es/posts/usecases-architecture/</link><pubDate>Fri, 06 Jun 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 06 Jun 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/ko/es/posts/usecases-architecture/</guid><description>Casos de Uso: Mejorando la Arquitectura de tu Proyecto En el desarrollo de software moderno, crear aplicaciones mantenibles, testables y escalables es un desafío constante. Un patrón arquitectónico que ha ganado una tracción significativa es el uso de Casos de Uso (también conocidos como Interactores en algunos contextos). Este artículo explora qué son los Casos de Uso, por qué mejoran la arquitectura de tu proyecto y cómo implementarlos de manera efectiva con ejemplos sencillos.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/usecase.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>architecture</category><category>clean-architecture</category><category>usecases</category><category>software-design</category></item></channel></rss>