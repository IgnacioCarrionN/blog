<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>manejo-de-errores on Carrion.dev</title><link>https://carrion.dev/ko/tags/manejo-de-errores/</link><description>Recent content in manejo-de-errores on Carrion.dev</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>ignacio@carrion.dev (Ignacio Carrión)</managingEditor><webMaster>ignacio@carrion.dev (Ignacio Carrión)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Fri, 29 Aug 2025 08:00:00 +0100</lastBuildDate><atom:link href="https://carrion.dev/ko/tags/manejo-de-errores/index.xml" rel="self" type="application/rss+xml"/><item><title>Kotlin 2.4 Rich Errors: Qué son y cómo prepararte</title><link>https://carrion.dev/ko/es/posts/kotlin-24-rich-errors/</link><pubDate>Fri, 29 Aug 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 29 Aug 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/ko/es/posts/kotlin-24-rich-errors/</guid><description>Kotlin 2.4 Rich Errors: Qué son y cómo prepararte Kotlin 2.4 introduce “Rich errors” (errores enriquecidos): una forma más expresiva y estructurada de representar y propagar fallos. El objetivo es claro: hacer que los flujos de error sean visibles y componibles en toda tu base de código y en múltiples plataformas, sin perder la ergonomía de Kotlin ni su gran historia de interoperabilidad.
Este artículo explica los problemas que Rich errors resuelven, cómo se relacionan con las excepciones y Result actuales, qué implican en cuanto a modelo mental e interop, y cómo preparar tu base de código para adoptarlos sin fricciones.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/rich-errors.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>manejo-de-errores</category><category>excepciones</category><category>result</category><category>kotlin-2-4</category></item><item><title>Manejo Elegante de Errores en Kotlin: Usando runCatching y Result</title><link>https://carrion.dev/ko/es/posts/runcatching-result-pattern/</link><pubDate>Fri, 20 Jun 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 20 Jun 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/ko/es/posts/runcatching-result-pattern/</guid><description>Manejo Elegante de Errores en Kotlin: Usando runCatching y Result El manejo de excepciones es un aspecto crítico para escribir aplicaciones robustas, pero los bloques tradicionales try/catch pueden llevar a código verboso y anidado que es difícil de leer y mantener. Kotlin ofrece un enfoque más elegante con la función runCatching y el tipo Result, que permiten manejar excepciones de manera funcional mientras se mantiene la legibilidad del código y se previenen fallos.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/result-pattern.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>manejo-de-errores</category><category>programacion-funcional</category><category>patron-result</category><category>manejo-de-excepciones</category></item></channel></rss>