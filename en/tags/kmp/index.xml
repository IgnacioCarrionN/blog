<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>kmp on Carrion.dev</title><link>https://carrion.dev/en/tags/kmp/</link><description>Recent content in kmp on Carrion.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ignacio@carrion.dev (Ignacio Carrión)</managingEditor><webMaster>ignacio@carrion.dev (Ignacio Carrión)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Fri, 16 May 2025 08:00:00 +0100</lastBuildDate><atom:link href="https://carrion.dev/en/tags/kmp/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Navigation in Compose Multiplatform Projects</title><link>https://carrion.dev/en/posts/compose-navigation-kmp/</link><pubDate>Fri, 16 May 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 16 May 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/compose-navigation-kmp/</guid><description>Implementing Navigation in Compose Multiplatform Projects With the latest release of Compose Multiplatform (1.8.0), iOS support has been declared stable, marking a significant milestone for cross-platform UI development with Kotlin. One of the key components for building robust applications is navigation, and the org.jetbrains.androidx.navigation library provides a powerful solution that can be integrated into Compose Multiplatform projects. This blog post explores how to implement navigation in a Compose Multiplatform environment, allowing you to share navigation logic across Android and iOS platforms.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/compose-navigation-kmp.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>multiplatform</category><category>kmp</category><category>compose</category><category>navigation</category></item><item><title>Implementing DataStore in Kotlin Multiplatform Projects</title><link>https://carrion.dev/en/posts/datastore-in-kmp/</link><pubDate>Fri, 09 May 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 09 May 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/datastore-in-kmp/</guid><description>Implementing DataStore in Kotlin Multiplatform Projects DataStore is a modern data storage solution developed by Google as a replacement for SharedPreferences. It provides a consistent, type-safe API for storing key-value pairs and typed objects with Kotlin coroutines and Flow support. With the recent advancements in Kotlin Multiplatform (KMP), we can now integrate DataStore into our KMP projects, allowing us to share preferences and data storage code across platforms. This blog post explores how to configure, implement, and optimize DataStore in a KMP environment.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/datastore-kmp.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>multiplatform</category><category>kmp</category><category>datastore</category><category>preferences</category></item><item><title>Implementing Room Database in Kotlin Multiplatform Projects</title><link>https://carrion.dev/en/posts/room-in-kmp/</link><pubDate>Tue, 06 May 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Tue, 06 May 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/room-in-kmp/</guid><description>Implementing Room Database in Kotlin Multiplatform Projects Room persistence library has become the standard for database operations in Android development, offering an abstraction layer over SQLite that enables robust database access while harnessing the full power of SQL. With the release of Room 2.7.1, we can now integrate this powerful library into Kotlin Multiplatform (KMP) projects, allowing us to share database code across platforms while leveraging platform-specific optimizations. This blog post explores how to configure, implement, and optimize Room in a KMP environment.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/room-kmp.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>multiplatform</category><category>kmp</category><category>room</category><category>database</category></item><item><title>Leveraging expect/actual in Kotlin Multiplatform for Native Implementations</title><link>https://carrion.dev/en/posts/expect-actual-kmp/</link><pubDate>Tue, 22 Apr 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Tue, 22 Apr 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/expect-actual-kmp/</guid><description>Leveraging expect/actual in Kotlin Multiplatform for Native Implementations Kotlin Multiplatform (KMP) has emerged as a powerful solution for sharing code across different platforms while still allowing for platform-specific implementations when needed. At the heart of this capability is the expect/actual mechanism, which enables developers to define a common API in shared code and provide platform-specific implementations. This blog post explores how to effectively use expect/actual to create robust multiplatform applications with native implementations.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/expect-actual-post.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>multiplatform</category><category>kmp</category></item><item><title>Swift export in KMP</title><link>https://carrion.dev/en/posts/swift-export/</link><pubDate>Wed, 18 Dec 2024 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Wed, 18 Dec 2024 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/swift-export/</guid><description>Swift export in Kmp Starting from version 2.1.0 we can start testing the Swift export in Kotlin. This feature allows you to export the Kotlin shared modules to Swift without the use of Objective-C. This will improve the iOS developers experience when using KMP modules.
At the moment basic support includes:
Export multiple Gradle modules to Swift. Define the Swift module names. Flatten package structure Enable the feature To start testing this functionality you should enable it on gradle.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/swift-export.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>android</category><category>kmp</category></item><item><title>Guard conditions in when starting in Kotlin 2.1.0.</title><link>https://carrion.dev/en/posts/kotlin-guard-conditions-in-when/</link><pubDate>Tue, 17 Dec 2024 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Tue, 17 Dec 2024 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/kotlin-guard-conditions-in-when/</guid><description>Guard conditions in when in Kotlin 2.1.0 One of the new features in Kotlin 2.1.0 is the guard conditions on when expressions, this feature will bring some advantages like:
Reduce nesting Avoid boilerplate Improve readability Enable the feature This feature is in preview state, for this you need to enable it starting on Kotlin 2.1.0. In the file build.gradle.kts we should add the new piece of code inside the kotlin block:</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/guard-when-new.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>android</category><category>kmp</category></item></channel></rss>