<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>software-design on Carrion.dev</title><link>https://carrion.dev/en/tags/software-design/</link><description>Recent content in software-design on Carrion.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ignacio@carrion.dev (Ignacio Carrión)</managingEditor><webMaster>ignacio@carrion.dev (Ignacio Carrión)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Fri, 13 Jun 2025 08:00:00 +0100</lastBuildDate><atom:link href="https://carrion.dev/en/tags/software-design/index.xml" rel="self" type="application/rss+xml"/><item><title>DataSources and Repository Patterns: Building a Robust Data Layer</title><link>https://carrion.dev/en/posts/datasources-repository-patterns/</link><pubDate>Fri, 13 Jun 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 13 Jun 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/datasources-repository-patterns/</guid><description>DataSources and Repository Patterns: Building a Robust Data Layer In modern application development, managing data access efficiently is crucial for creating maintainable and scalable software. Two architectural patterns that significantly improve data management are the DataSource and Repository patterns. This blog post explores what these patterns are, how they work together, and how to implement them effectively with practical examples.
What Are DataSources? DataSources are components responsible for handling data operations with a specific data origin.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/repository.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>architecture</category><category>clean-architecture</category><category>repository-pattern</category><category>datasources</category><category>software-design</category></item><item><title>UseCases: Improving Your Project Architecture</title><link>https://carrion.dev/en/posts/usecases-architecture/</link><pubDate>Fri, 06 Jun 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 06 Jun 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/usecases-architecture/</guid><description>UseCases: Improving Your Project Architecture In modern software development, creating maintainable, testable, and scalable applications is a constant challenge. One architectural pattern that has gained significant traction is the use of UseCases. This blog post explores what UseCases are, why they improve your project&amp;rsquo;s architecture, and how to implement them effectively with simple examples.
What Are UseCases? UseCases represent the business logic or application-specific rules of your software. They encapsulate a single, specific action that can be performed in your application.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/usecase.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>architecture</category><category>clean-architecture</category><category>usecases</category><category>software-design</category></item></channel></rss>