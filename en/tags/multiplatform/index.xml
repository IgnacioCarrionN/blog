<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>multiplatform on Carrion.dev</title><link>https://carrion.dev/en/tags/multiplatform/</link><description>Recent content in multiplatform on Carrion.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ignacio@carrion.dev (Ignacio Carrión)</managingEditor><webMaster>ignacio@carrion.dev (Ignacio Carrión)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Fri, 16 May 2025 08:00:00 +0100</lastBuildDate><atom:link href="https://carrion.dev/en/tags/multiplatform/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing Navigation in Compose Multiplatform Projects</title><link>https://carrion.dev/en/posts/compose-navigation-kmp/</link><pubDate>Fri, 16 May 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 16 May 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/compose-navigation-kmp/</guid><description>Implementing Navigation in Compose Multiplatform Projects With the latest release of Compose Multiplatform (1.8.0), iOS support has been declared stable, marking a significant milestone for cross-platform UI development with Kotlin. One of the key components for building robust applications is navigation, and the org.jetbrains.androidx.navigation library provides a powerful solution that can be integrated into Compose Multiplatform projects. This blog post explores how to implement navigation in a Compose Multiplatform environment, allowing you to share navigation logic across Android and iOS platforms.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/compose-navigation-kmp.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>multiplatform</category><category>kmp</category><category>compose</category><category>navigation</category></item><item><title>Implementing DataStore in Kotlin Multiplatform Projects</title><link>https://carrion.dev/en/posts/datastore-in-kmp/</link><pubDate>Fri, 09 May 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Fri, 09 May 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/datastore-in-kmp/</guid><description>Implementing DataStore in Kotlin Multiplatform Projects DataStore is a modern data storage solution developed by Google as a replacement for SharedPreferences. It provides a consistent, type-safe API for storing key-value pairs and typed objects with Kotlin coroutines and Flow support. With the recent advancements in Kotlin Multiplatform (KMP), we can now integrate DataStore into our KMP projects, allowing us to share preferences and data storage code across platforms. This blog post explores how to configure, implement, and optimize DataStore in a KMP environment.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/datastore-kmp.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>multiplatform</category><category>kmp</category><category>datastore</category><category>preferences</category></item><item><title>Implementing Room Database in Kotlin Multiplatform Projects</title><link>https://carrion.dev/en/posts/room-in-kmp/</link><pubDate>Tue, 06 May 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Tue, 06 May 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/room-in-kmp/</guid><description>Implementing Room Database in Kotlin Multiplatform Projects Room persistence library has become the standard for database operations in Android development, offering an abstraction layer over SQLite that enables robust database access while harnessing the full power of SQL. With the release of Room 2.7.1, we can now integrate this powerful library into Kotlin Multiplatform (KMP) projects, allowing us to share database code across platforms while leveraging platform-specific optimizations. This blog post explores how to configure, implement, and optimize Room in a KMP environment.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/room-kmp.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>multiplatform</category><category>kmp</category><category>room</category><category>database</category></item><item><title>Leveraging expect/actual in Kotlin Multiplatform for Native Implementations</title><link>https://carrion.dev/en/posts/expect-actual-kmp/</link><pubDate>Tue, 22 Apr 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Tue, 22 Apr 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/expect-actual-kmp/</guid><description>Leveraging expect/actual in Kotlin Multiplatform for Native Implementations Kotlin Multiplatform (KMP) has emerged as a powerful solution for sharing code across different platforms while still allowing for platform-specific implementations when needed. At the heart of this capability is the expect/actual mechanism, which enables developers to define a common API in shared code and provide platform-specific implementations. This blog post explores how to effectively use expect/actual to create robust multiplatform applications with native implementations.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/expect-actual-post.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>multiplatform</category><category>kmp</category></item><item><title>Kotlin Multiplatform Architecture Best Practices for Mobile Apps</title><link>https://carrion.dev/en/posts/kmp-architecture/</link><pubDate>Tue, 11 Feb 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Tue, 11 Feb 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/kmp-architecture/</guid><description>Kotlin Multiplatform Architecture Best Practices for Mobile Apps Kotlin Multiplatform (KMP) allows developers to share business logic between Android and iOS while keeping platform-specific implementations where necessary. Structuring a KMP project efficiently is key to maintaining scalability, testability, and clean architecture. In this guide, we’ll explore best practices for architecting a KMP mobile application with Compose Multiplatform and Clean Architecture.
1. Project Structure A well-organized project structure improves maintainability and separation of concerns.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/expect-actual.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>compose</category><category>cmp</category><category>multiplatform</category><category>cleancode</category><category>architecture</category></item><item><title>Testing in Compose Multiplatform (CMP) from Common Code</title><link>https://carrion.dev/en/posts/cmp-ui-testing/</link><pubDate>Mon, 03 Feb 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Mon, 03 Feb 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/cmp-ui-testing/</guid><description>Testing in Compose Multiplatform (CMP) from Common Code Compose Multiplatform (CMP) enables building UI for multiple platforms using Jetpack Compose. Fortunately, CMP also supports writing and running UI tests in the common code, making testing more efficient across platforms. In this post, we’ll explore how to test CMP applications using compose.uiTest and run them on Android, Desktop, and iOS.
1. Setting Up Common UI Testing CMP provides compose.uiTest, allowing UI tests to be written in the shared module without platform-specific dependencies.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/compose-test.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>compose</category><category>cmp</category><category>multiplatform</category></item><item><title>Using Koin in Compose Multiplatform</title><link>https://carrion.dev/en/posts/koin-cmp/</link><pubDate>Thu, 02 Jan 2025 08:00:00 +0100</pubDate><author>ignacio@carrion.dev (Ignacio Carrión)</author><atom:modified>Thu, 02 Jan 2025 08:00:00 +0100</atom:modified><guid>https://carrion.dev/en/posts/koin-cmp/</guid><description>Using Koin in Compose Multiplatform Dependency injection is a must-have for scalable applications, and Koin makes it straightforward, even in Compose Multiplatform projects. With the new KoinApplication composable function, you can initialize Koin directly from commonMain code, reducing boilerplate while maintaining platform-specific flexibility. Let’s walk through an example.
Project Setup Start by creating a Compose Multiplatform project using the KMP Wizard, selecting Android, iOS, Desktop, and Web targets. For this example, we won’t include a server target.</description><dc:creator>Ignacio Carrión</dc:creator><media:content url="https://carrion.dev/images/kotlin/koin-cmp.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kotlin</category><category>multiplatform</category><category>cmp</category><category>compose</category><category>koin</category></item></channel></rss>